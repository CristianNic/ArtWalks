{"ast":null,"code":"var _jsxFileName = \"/Users/cristian/Dev/GitHub/CristianNic/ArtWalks/client/src/pages/ArtMap.jsx\";\nimport React, { useState } from \"react\";\nimport { Component } from 'react';\nimport axios from 'axios';\nimport { MapContainer, Marker, Popup, TileLayer, LayersControl, LayerGroup, Polyline, Polygon, GeoJSON } from \"react-leaflet\";\nimport { useLeaflet } from \"react-leaflet\"; // import Control from 'react-leaflet-control';\n\nimport { Icon } from \"leaflet\";\nimport L from 'leaflet'; // import L, { map, Popup } from 'leaflet';\n\nimport 'leaflet/dist/leaflet.css';\nimport groupBy from \"lodash\"; //------------------ Pages -------------------------// \n\nimport BottomNav from '../components/BottomNav/BottomNav';\nimport Search from '../components/Search/Search'; //------------------ Map Tiles -----------------------//\n\nimport { URL_CUSTOM_OUTDOORS_DARKER } from '../components/Utils/MapboxToken'; //-------------- Ioncs converted for Leaflet ----------// \n\nimport { fountain, gateway, memorial, mosaic, mural, siteIntergrated, statue, totem, defaultIconSkater, blackGithub, redGithub } from '../components/Utils/MapIcons'; //---------------- Icons --------------------------// \n\nimport redHeart from \"../assets/icons/heart_red.svg\";\nimport blackHeart from \"../assets/icons/heart-black-2px.svg\";\nimport lightGray1Heart2 from \"../assets/icons/heart-light-gray-1-2px.svg\";\nimport lightGray1Heart2Filled from \"../assets/icons/heart-light-gray-1-2px-filled.svg\";\nimport iconMaximize from \"../assets/icons/maximize-2-1.5px.svg\";\nimport redGithubicon from \"../assets/icons/github-red-2px.svg\";\nimport blackGithubicon from \"../assets/icons/github-black-2px.svg\";\nimport { FiHome, FiChevronRight, FiSearch, FiSettings } from \"react-icons/fi\";\nimport skateboarding from \"../assets/icons/skateboarding.svg\"; // import redGithubicon from '../assets/icons/skateboarding.svg';\n//------------- Art Work Icons - Nav Bar--------------//\n// import Fountain from '../assets/art-works/fountain.svg';\n// import Gateway from '../assets/art-works/gateway.svg';\n// import Memorial from '../assets/art-works/memorial.svg';\n// import Mosaic from '../assets/art-works/mosaic.svg';\n// import Mural1 from '../assets/art-works/mural-1.svg';\n// import Mural2 from '../assets/art-works/mural-2.svg';\n// import Mural3 from '../assets/art-works/mural-3.svg';\n// import SiteIntergrated from '../assets/art-works/site-intergrated.svg';\n// import Statue from '../assets/art-works/statue.svg';\n// import Totem from '../assets/art-works/totem.svg';\n// import TotemSolid from '../assets/art-works/totem-solid.svg';\n// import icon from 'leaflet/dist/images/marker-icon.png';\n\nimport maximize from \"../assets/icons/maximize-2-1.5px.svg\";\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png'; //----------------- Data -------------------//\n// // import * as parkData from \"../data/skateboard-parks.json\";\n// import { API_URL } from '../components/Utils/Utils';\n\nimport { neighbourhoods, API_URL } from '../components/Utils/Utils';\nimport data from '../data_temp/art_work_final_geom.json'; //import publicArtData from '../data_temp/public-art-smaller.json';\n\nimport { restaurants } from \"../data_temp/data\";\nimport neighbourhood_boundaries from '../data_temp/local-area-boundary.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dunbar = neighbourhood_boundaries[0].fields.geom.coordinates; // var poly = L.polygon(Dunbar).addTo(L.map);\n//-------------- Marker Icons --------------// \n// const mural2 = L.icon({\n//   iconUrl: Mural2,\n//   iconSize: [25, 41],\n//   iconAnchor: [12, 41]\n// })\n// const mural3 = L.icon({\n//   iconUrl: Mural3,\n//   iconSize: [25, 41],\n//   iconAnchor: [12, 41]\n// })\n//----------- Marker Icons -----------// \n// L.Marker.prototype.options.icon = DefaultIcon;  //  <------ Default Icon \n// L.Marker.prototype.options.icon = SpecialIcon;\n//------------- Experiment -----------// \n// const cool = new L.Map('map');\n// var legend = L.control({position: 'topright'});\n// legend.onAdd = function (map) {\n//     var div = L.DomUtil.create('div', 'info legend');\n//     div.innerHTML = '<select><option>1</option><option>2</option><option>3</option></select>';\n//     div.firstChild.onmousedown = div.firstChild.ondblclick = L.DomEvent.stopPropagation;\n//     return div;\n// };\n// legend.addTo(cool);\n\nconst RESTAURANT_TYPES = [\"Family Style\", \"Buffet\", \"Fast Food\", \"Cafe\"]; // const eventFire = (el, etype) => {\n//   if (el.fireEvent) {\n//     el.fireEvent('on' + etype);\n//   } else {\n//     var evObj = document.createEvent('Events');\n//     evObj.initEvent(etype, true, false);\n//     el.dispatchEvent(evObj);\n//   }\n// }\n\nclass MapArt4_skateVideo_classComp extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      art_works: [],\n      user_id: parseInt(localStorage.getItem('user_id')),\n      userCurrentLocation: [parseFloat(localStorage.getItem('userLat')), parseFloat(localStorage.getItem('userLon'))],\n      userFavourites: [],\n      userFavouritesByRegistryId: [],\n      neighbourhood_boundaries: neighbourhood_boundaries\n    };\n\n    this.selectNeighbourhood = location => {\n      // passed on Search bar as a prop\n      // console.log('Search --> location.target.value --> ', location.target.value) // name of neighbourhood\n      // console.log('Search --> this.state.art_works --> ', this.state.art_works) // name of neighbourhood\n      console.log('Select Neighbourhood - data --> ', data); // name of neighbourhood\n      // if it's not Vancouver then do this: \n\n      if ('Vancouver' === location.target.value) {\n        // this.setState({ art_works: this.state.artWorks }) // do nothing \n        this.setState({\n          art_works: data\n        }); // do nothing\n      } else {\n        // if it's anything else, then filter for that \n        // const data = this.state.art_works  \n        const filteredData = data.filter(area => area.neighbourhood === location.target.value);\n        this.setState({\n          art_works: filteredData\n        });\n        console.log('Select Neighbourhood - filteredData --> ', filteredData);\n      } // console.log('Search --> filteredData --> ', filteredData)\n      // const filteredData = this.state.filtered_art_works.filter( (area) => {\n      //   return area.neighbourhood === event.target.value\n      // })\n      // if (filteredData.length > 0) {\n      //   this.setState({filtered_art_works: filteredData})\n      // }\n      // else {\n      //   this.setState({filtered_art_works: publicArtData})\n      // } \n\n    };\n\n    this.selectFavourties = (e, faves) => {\n      console.log('Select Favourites - data --> ', data); // data being filtered \n\n      console.log('Select Favourites - userFavouritesByRegistryId --> ', this.state.userFavouritesByRegistryId); // by registry_id\n      // return from all art_works (data) only those included in the userFavouritesByRegistryId array \n\n      const selectFavourties = data.filter(i => this.state.userFavouritesByRegistryId.includes(i.registry_id));\n      console.log('Select Favourites - selectFavourties --> ', selectFavourties);\n      this.setState({\n        art_works: selectFavourties\n      });\n    };\n\n    this.print = () => {\n      console.log('Hello');\n      console.log('Print', this.state.userFavourites);\n    };\n\n    this.removeFromFavourites = (e, registry_id) => {\n      console.log('REMOVE to Favourites --> ', registry_id);\n      console.log('this.state.art_works --> ', this.state.art_works); // displays all, \n      // console.log('this.state.userFavouritesByRegistryId -->', this.state.userFavouritesByRegistryId) // lots of duplicates \n      // take all art_works currently in state and remove the registry_id selected, then set the new array in state\n      // filter out the selected registry_id from all art_works being displayed \n\n      const result = this.state.art_works.filter(work => work.registry_id !== registry_id);\n      console.log('Filtered --> ', result); // const afterRemovingArtWork = this.state.art_works.filter( i => this.state.userFavouritesByRegistryId.includes( !i.registry_id ))\n      // this.setState(state => {\n      //   return {display: !state.display}\n      // })\n      // this.state.userFavourites.forEach(function (item, index) {\n      //   if (item.art_works.registry_id === data) {\n      //     localStorage.setItem('art_work_id', item.art_work_id)\n      //   }\n      // })\n      // const artWorkId = parseInt(localStorage.getItem('art_work_id'))\n      // // Send remove \n      // axios\n      //   .delete(`${API_URL}/favourites/${this.state.user_id}/remove/${artWorkId}`)\n      //   .then((response) => {\n      //     this.setState(state => {\n      //       return {display: !state.display}\n      //     })\n      //   })\n      //   .catch((error) => {\n      //   console.log('error:', error.response.data);\n      //   })\n      // this.getUserFavourites()\n      // this.forceUpdate()\n      // this.setState(state => {\n      //   return {display: !state.display}\n      // })\n      //  window.location.reload() \n      // this.forceUpdate()\n\n      localStorage.removeItem('art_work_id'); // this.forceUpdate()\n    };\n\n    this.addToFavourites = (e, registry_id) => {\n      // console.log('Liked state -->', this.state.liked)\n      console.log('ADD to Favourites -- registry.id --> ', registry_id); //console.log(e)\n\n      console.log('this.state.art_works --> ', this.state.art_works);\n      console.log('this.state.userFavouritesByRegistryId -->', this.state.userFavouritesByRegistryId); // get art_work_id used in MySQL given given registry_id\n\n      this.state.art_works.forEach(function (item, index) {\n        if (item.registry_id === registry_id) {\n          const position = index + 1;\n          localStorage.setItem('art_work_id_for_user_post', position);\n        }\n      });\n      const art_work_id_for_user_post = parseInt(localStorage.getItem('art_work_id_for_user_post'));\n      console.log(`${API_URL}/favourites/${this.state.user_id}/${art_work_id_for_user_post}`);\n      axios.post(`${API_URL}/favourites/${this.state.user_id}/${art_work_id_for_user_post}`).then(response => {// window.location.reload()\n        // console.log('this.state.userFavouritesByRegistryId - After Axios-->', this.state.userFavouritesByRegistryId)\n      }).catch(error => {\n        console.log('error:', error.response.data);\n      }); // localStorage.removeItem('art_work_id_for_user_post') // neede? \n\n      this.getUserFavourites(); // update userFavourites in state \n      // localStorage.removeItem('art_work_id_for_user_post');\n      // console.log('this.state.userFavouritesByRegistryId -->', this.state.userFavouritesByRegistryId)\n      //  window.location.reload() \n      // Get Gray heart Click ... \n      // const grayHeart = document.getElementById('grayHeart');\n      //   grayHeart.addEventListener('click', () => { \n      //     document.getElementById(\"pv-contact-info\").innerText; \n      // });\n    };\n\n    this.visitDetailsPage = (e, registry_id) => {\n      this.props.history.push(`/details/${registry_id}`);\n    };\n  }\n\n  componentDidMount() {\n    this.getAllArtWorks();\n    this.getUserLocation();\n    this.getUserFavourites(); // this.getUrlId()\n  }\n\n  componentDidUpdate(prevProps) {\n    // Typical usage (don't forget to compare props):   <---- Double Check \n    // if (this.props.userFavourites !== prevProps.userFavourites) {\n    //   this.fetchData(this.props.userFavourites);\n    // }\n    this.openPopUp();\n  }\n\n  componentWillUnmount() {\n    this.clearOpenPopUp();\n  }\n\n  clearOpenPopUp() {\n    // if the user returns from a page without having selected an artwork,\n    // the map will now load without a selected artwork\n    localStorage.removeItem('currently viewing');\n  }\n\n  openPopUp() {\n    var _document$querySelect;\n\n    const id = parseInt(localStorage.getItem('currently viewing'));\n    (_document$querySelect = document.querySelector(`img[alt = \"marker-${id}\"]`)) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.click();\n  } // -------- componentDidMount functions ------ //\n\n\n  getAllArtWorks() {\n    // axios\n    //   .get(`http://localhost:8090/art_works`)\n    //   .then((response) => {\n    //     this.setState({ art_works: response.data.art_works })\n    //   })\n    //   .catch(function (error) { })\n    this.setState({\n      art_works: data\n    });\n  }\n\n  getUserLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.watchPosition(function (position) {\n        // console.log(\"Current user Latitude is:\", position.coords.latitude);\n        // console.log(\"Current user Longitude is:\", position.coords.longitude);\n        localStorage.setItem('userLat', position.coords.latitude);\n        localStorage.setItem('userLon', position.coords.longitude);\n      });\n    }\n  }\n\n  getUserFavourites() {\n    // art_work_id is set by the MySQL database, while registry_id is from the City of Vancouver dataset (req. for matching artist info)\n    // userFavourites sets all details on favourite art_works and userFavouritesByRegistryId extracts the matching registry_id's\n    axios.get(`${API_URL}/favourites/${this.state.user_id}`).then(response => {\n      this.setState({\n        userFavourites: response.data,\n        userFavouritesByRegistryId: response.data.map(fave => fave.art_works.registry_id)\n      }); // const faves = this.state.userFavourites;\n      // console.log('USER Favourites -- in RENDER ---> ', faves)\n      // const userArtWorkIdMaped = faves.map((fave => fave.art_work_id)) // User's Favourites have this ID\n      // console.log('userArtWorkIdMaped ---> ', userArtWorkIdMaped)\n      // console.log('Does this include 158?-->', userArtWorkIdMaped.includes(158))\n      // const userRegistryId = faves.map((fave) => fave.art_works.registry_id);\n      // console.log(\"userRegistryId ---> \", userRegistryId);\n    }).catch(error => {\n      console.log('error:', error.response.data);\n    });\n  } //------------ onClick functions ------------------// \n\n\n  // L.CustomHandler = L.Handler.extend({\n  //   addHooks: function() {\n  //       L.DomEvent.on(document, 'eventname', this._doSomething, this);\n  // },\n  // <a href=\"https://www.vecteezy.com/free-vector/human\">Human Vectors by Vecteezy</a>\n  // Choose your Avatar Character --> https://www.vecteezy.com/free-vector/8-bit-character?license-free=true\n  render() {\n    console.log('Render -> Art_works --> ', this.state.art_works); // console.log('Render -> User Favourties --> ', this.state.userFavourites);\n\n    {\n      console.log('Hello');\n    } // console.log(`Hi, I'm the map for user --> `, this.state.user_id)\n    // console.log(`User's current location --> `, this.state.userCurrentLocation);\n    // console.log('userFavourites --> ', this.state.userFavourites);\n    // console.log('userFavouritesByRegistryId --> ', this.state.userFavouritesByRegistryId);\n    // console.log('neighbourhood Boundaries: fields.name -->', neighbourhood_boundaries[0].fields.name)\n    // console.log('neighbourhood Boundaries: fields.name.coordinates -->', neighbourhood_boundaries[0].fields.geom.coordinates)\n    // console.log('neighbourhood Boundaries: geom -->', Dunbar)\n    // console.log('neighbourhood Boundaries: inState -->', this.state.neighbourhood_boundaries)\n    // const groupedByType = groupBy(restaurants, (restaurant) => restaurant.type);\n    // const userFavouritesObj = this.state.userFavourites\n\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"floating\",\n        children: /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"floating__container\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"floating__select\",\n            onChange: this.selectNeighbourhood,\n            name: \"neighbourhood\",\n            id: \"neighbourhood-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Neighbourhood\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Vancouver\",\n              children: \"All of Vancouver\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 15\n            }, this), neighbourhoods.map((area, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: area,\n              children: area\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 15\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"floating__btn\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              onClick: e => console.log('Hello'),\n              className: \"floating__icon\",\n              src: redHeart\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: [49.2780, -123.1153],\n        zoom: 12,\n        children: [/*#__PURE__*/_jsxDEV(TileLayer // url={`${URL_CUSTOM_OUTDOORS}`}\n        , {\n          url: `${URL_CUSTOM_OUTDOORS_DARKER}`,\n          attribution: \"\\xA9 <a href='http://osm.org/copyright'>OpenStreetMap</a> <a href='https://www.mapbox.com/about/maps/'>Mapbox</a>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: [49.2780, -123.1153],\n          icon: blackGithub\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          className: \"current-user-location AVATAR\",\n          position: [this.state.userCurrentLocation[0], this.state.userCurrentLocation[1]],\n          icon: redGithub,\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Current User Location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: this.state.userCurrentLocation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this), this.state.art_works.map(artWork => /*#__PURE__*/_jsxDEV(Marker, {\n          position: [artWork.lat, artWork.lon],\n          id: `marker-${artWork.registry_id}`,\n          className: `marker-${artWork.registry_id}` // icon={`${artWork.type}`}\n          // icon={artWork.type !== 'Memorial_or_monument' ? DefaultIcon : fountain} // works =) \n          ,\n          icon: artWork.type === 'Fountain' ? fountain : artWork.type === 'Gateway' ? gateway : artWork.type === 'Memorial_or_monument' ? memorial : artWork.type === 'Totem_pole' ? totem : artWork.type === 'Site_integrated_work' ? siteIntergrated : artWork.type === 'Mural' ? mural : artWork.type === '2D' ? mural : artWork.type === 'Mosaic' ? mosaic : artWork.type === 'Relief' ? mosaic : artWork.type === 'Media_work' ? mosaic : artWork.type === 'Sculpture' ? statue : artWork.type === 'Figurative' ? statue : defaultIconSkater // icon={cool = () => { if (artWork.type !== 'Memorial_or_monument') { DefaultIcon } else { fountain } }}\n          // icon={fountain} // Memorial_or_monument\n          // icon={if artWork is fountatin then place fountain if artWork.type === Sculpture then display sculpture.svg}\n          ,\n          alt: `marker-${artWork.registry_id}`,\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            id: `popup-${artWork.registry_id}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"popup\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"img\",\n                src: artWork.photo_url_jpg,\n                alt: artWork.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"popup-inside\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                    onClick: e => {\n                      this.addToFavourites(e, artWork.registry_id);\n                    },\n                    children: artWork.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 507,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: [\"by \", artWork.artists_names]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 508,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: artWork.type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 509,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 506,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"popup-icons\",\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"icon-maximize\",\n                    src: iconMaximize,\n                    alt: \"maximize icon, click to visit details page\",\n                    onClick: e => {\n                      this.visitDetailsPage(e, artWork.registry_id);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 512,\n                    columnNumber: 27\n                  }, this), this.state.userFavouritesByRegistryId.includes(artWork.registry_id) === true ? /*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"icon\",\n                    src: redHeart,\n                    alt: \"red heart icon, click to remove from favourites\",\n                    onClick: e => {\n                      this.removeFromFavourites(e, artWork.registry_id);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 519,\n                    columnNumber: 29\n                  }, this) :\n                  /*#__PURE__*/\n                  // <img className=\"icon\" src={lightGray1Heart2} alt=\"white heart icon, click to add to favourites\"\n                  _jsxDEV(\"img\", {\n                    className: \"icon\",\n                    src: blackHeart,\n                    alt: \"white heart icon, click to add to favourites\",\n                    onClick: e => {\n                      this.addToFavourites(e, artWork.registry_id);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 523,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 511,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 17\n        }, this)), /*#__PURE__*/_jsxDEV(Polygon, {\n          color: \"blue\",\n          positions: this.state.neighbourhood_boundaries[0].fields.geom.coordinates\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n          data: this.state.neighbourhood_boundaries[0].fields.geom.coordinates\n        }, \"my-geojson\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BottomNav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MapArt4_skateVideo_classComp; //---------------- PolyLine Experiment -------------//\n// <Polyline pathOptions={limeOptions} positions={multiPolyline} />  // Polyline inside is not colored\n// <Polygon pathOptions={purpleOptions} positions={multiPolygon} />","map":{"version":3,"sources":["/Users/cristian/Dev/GitHub/CristianNic/ArtWalks/client/src/pages/ArtMap.jsx"],"names":["React","useState","Component","axios","MapContainer","Marker","Popup","TileLayer","LayersControl","LayerGroup","Polyline","Polygon","GeoJSON","useLeaflet","Icon","L","groupBy","BottomNav","Search","URL_CUSTOM_OUTDOORS_DARKER","fountain","gateway","memorial","mosaic","mural","siteIntergrated","statue","totem","defaultIconSkater","blackGithub","redGithub","FiHome","FiChevronRight","FiSearch","FiSettings","icon","iconShadow","neighbourhoods","API_URL","data","restaurants","neighbourhood_boundaries","Dunbar","fields","geom","coordinates","RESTAURANT_TYPES","MapArt4_skateVideo_classComp","state","art_works","user_id","parseInt","localStorage","getItem","userCurrentLocation","parseFloat","userFavourites","userFavouritesByRegistryId","selectNeighbourhood","location","console","log","target","value","setState","filteredData","filter","area","neighbourhood","selectFavourties","e","faves","i","includes","registry_id","print","removeFromFavourites","result","work","removeItem","addToFavourites","forEach","item","index","position","setItem","art_work_id_for_user_post","post","then","response","catch","error","getUserFavourites","visitDetailsPage","props","history","push","componentDidMount","getAllArtWorks","getUserLocation","componentDidUpdate","prevProps","openPopUp","componentWillUnmount","clearOpenPopUp","id","document","querySelector","click","navigator","geolocation","watchPosition","coords","latitude","longitude","get","map","fave","render","redHeart","artWork","lat","lon","type","photo_url_jpg","title","artists_names","iconMaximize","blackHeart"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Component } from 'react';\nimport axios from 'axios';\nimport {\n  MapContainer, Marker, Popup, TileLayer,\n  LayersControl, LayerGroup, Polyline, Polygon, GeoJSON\n} from \"react-leaflet\";\nimport { useLeaflet } from \"react-leaflet\";\n// import Control from 'react-leaflet-control';\nimport { Icon } from \"leaflet\";\nimport L from 'leaflet';\n// import L, { map, Popup } from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport groupBy from \"lodash\"\n\n//------------------ Pages -------------------------// \nimport BottomNav from '../components/BottomNav/BottomNav';\nimport Search from '../components/Search/Search';\n\n//------------------ Map Tiles -----------------------//\nimport { URL_CUSTOM_OUTDOORS_DARKER } from '../components/Utils/MapboxToken';\n\n\n//-------------- Ioncs converted for Leaflet ----------// \nimport {\n  fountain, gateway, memorial, mosaic, mural, siteIntergrated, statue,\n  totem, defaultIconSkater, blackGithub, redGithub\n} from '../components/Utils/MapIcons';\n\n//---------------- Icons --------------------------// \nimport redHeart from '../assets/icons/heart_red.svg';\nimport blackHeart from '../assets/icons/heart-black-2px.svg';\nimport lightGray1Heart2 from '../assets/icons/heart-light-gray-1-2px.svg';\nimport lightGray1Heart2Filled from '../assets/icons/heart-light-gray-1-2px-filled.svg';\nimport iconMaximize from '../assets/icons/maximize-2-1.5px.svg';\n\nimport redGithubicon from '../assets/icons/github-red-2px.svg';\nimport blackGithubicon from '../assets/icons/github-black-2px.svg';\nimport { FiHome, FiChevronRight, FiSearch, FiSettings } from \"react-icons/fi\";\nimport skateboarding from '../assets/icons/skateboarding.svg';\n// import redGithubicon from '../assets/icons/skateboarding.svg';\n\n//------------- Art Work Icons - Nav Bar--------------//\n// import Fountain from '../assets/art-works/fountain.svg';\n// import Gateway from '../assets/art-works/gateway.svg';\n// import Memorial from '../assets/art-works/memorial.svg';\n// import Mosaic from '../assets/art-works/mosaic.svg';\n// import Mural1 from '../assets/art-works/mural-1.svg';\n// import Mural2 from '../assets/art-works/mural-2.svg';\n// import Mural3 from '../assets/art-works/mural-3.svg';\n// import SiteIntergrated from '../assets/art-works/site-intergrated.svg';\n// import Statue from '../assets/art-works/statue.svg';\n// import Totem from '../assets/art-works/totem.svg';\n// import TotemSolid from '../assets/art-works/totem-solid.svg';\n\n// import icon from 'leaflet/dist/images/marker-icon.png';\nimport maximize from '../assets/icons/maximize-2-1.5px.svg';\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\n\n\n//----------------- Data -------------------//\n// // import * as parkData from \"../data/skateboard-parks.json\";\n// import { API_URL } from '../components/Utils/Utils';\nimport { neighbourhoods, API_URL } from '../components/Utils/Utils';\nimport data from '../data_temp/art_work_final_geom.json';\n//import publicArtData from '../data_temp/public-art-smaller.json';\nimport { restaurants } from \"../data_temp/data\";\nimport neighbourhood_boundaries from '../data_temp/local-area-boundary.json';\nconst Dunbar = neighbourhood_boundaries[0].fields.geom.coordinates\n// var poly = L.polygon(Dunbar).addTo(L.map);\n \n\n\n//-------------- Marker Icons --------------// \n\n// const mural2 = L.icon({\n//   iconUrl: Mural2,\n//   iconSize: [25, 41],\n//   iconAnchor: [12, 41]\n// })\n// const mural3 = L.icon({\n//   iconUrl: Mural3,\n//   iconSize: [25, 41],\n//   iconAnchor: [12, 41]\n// })\n\n//----------- Marker Icons -----------// \n\n// L.Marker.prototype.options.icon = DefaultIcon;  //  <------ Default Icon \n// L.Marker.prototype.options.icon = SpecialIcon;\n\n//------------- Experiment -----------// \n\n// const cool = new L.Map('map');\n\n// var legend = L.control({position: 'topright'});\n// legend.onAdd = function (map) {\n//     var div = L.DomUtil.create('div', 'info legend');\n//     div.innerHTML = '<select><option>1</option><option>2</option><option>3</option></select>';\n//     div.firstChild.onmousedown = div.firstChild.ondblclick = L.DomEvent.stopPropagation;\n//     return div;\n// };\n// legend.addTo(cool);\n\n\nconst RESTAURANT_TYPES = [\"Family Style\", \"Buffet\", \"Fast Food\", \"Cafe\"];\n\n// const eventFire = (el, etype) => {\n//   if (el.fireEvent) {\n//     el.fireEvent('on' + etype);\n//   } else {\n//     var evObj = document.createEvent('Events');\n//     evObj.initEvent(etype, true, false);\n//     el.dispatchEvent(evObj);\n//   }\n// }\n\n\nclass MapArt4_skateVideo_classComp extends Component {\n\n  state = {\n    art_works: [],\n    user_id: parseInt(localStorage.getItem('user_id')),\n    userCurrentLocation: [parseFloat(localStorage.getItem('userLat')), parseFloat(localStorage.getItem('userLon'))],\n    userFavourites: [],\n    userFavouritesByRegistryId: [],\n    neighbourhood_boundaries: neighbourhood_boundaries,\n  }\n\n  componentDidMount() {\n    this.getAllArtWorks()\n    this.getUserLocation()\n    this.getUserFavourites()\n    // this.getUrlId()\n  }\n\n  componentDidUpdate(prevProps) {\n    // Typical usage (don't forget to compare props):   <---- Double Check \n    // if (this.props.userFavourites !== prevProps.userFavourites) {\n    //   this.fetchData(this.props.userFavourites);\n    // }\n    this.openPopUp()\n  }\n\n  componentWillUnmount() {\n    this.clearOpenPopUp()\n  }\n\n  clearOpenPopUp() {\n    // if the user returns from a page without having selected an artwork,\n    // the map will now load without a selected artwork\n    localStorage.removeItem('currently viewing');\n  }\n  \n  openPopUp() {\n    const id = parseInt(localStorage.getItem('currently viewing'))\n    document.querySelector(`img[alt = \"marker-${id}\"]`)?.click()\n  }\n\n  // -------- componentDidMount functions ------ //\n  getAllArtWorks() {\n    // axios\n    //   .get(`http://localhost:8090/art_works`)\n    //   .then((response) => {\n    //     this.setState({ art_works: response.data.art_works })\n    //   })\n    //   .catch(function (error) { })\n    \n    this.setState({ art_works: data })\n  }\n\n  getUserLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.watchPosition(function (position) {\n        // console.log(\"Current user Latitude is:\", position.coords.latitude);\n        // console.log(\"Current user Longitude is:\", position.coords.longitude);\n        localStorage.setItem('userLat', position.coords.latitude)\n        localStorage.setItem('userLon', position.coords.longitude)\n      })\n    }\n  }\n\n  getUserFavourites() {\n    // art_work_id is set by the MySQL database, while registry_id is from the City of Vancouver dataset (req. for matching artist info)\n    // userFavourites sets all details on favourite art_works and userFavouritesByRegistryId extracts the matching registry_id's\n    axios\n      .get(`${API_URL}/favourites/${this.state.user_id}`)\n      .then((response) => {\n        this.setState({\n          userFavourites: response.data,\n          userFavouritesByRegistryId: response.data.map((fave) => fave.art_works.registry_id)\n        })\n        // const faves = this.state.userFavourites;\n        // console.log('USER Favourites -- in RENDER ---> ', faves)\n\n        // const userArtWorkIdMaped = faves.map((fave => fave.art_work_id)) // User's Favourites have this ID\n        // console.log('userArtWorkIdMaped ---> ', userArtWorkIdMaped)\n\n        // console.log('Does this include 158?-->', userArtWorkIdMaped.includes(158))\n\n        // const userRegistryId = faves.map((fave) => fave.art_works.registry_id);\n        // console.log(\"userRegistryId ---> \", userRegistryId);\n      })\n      .catch((error) => {\n      console.log('error:', error.response.data);\n    })\n  }\n  \n//------------ onClick functions ------------------// \n  \n  selectNeighbourhood = (location) => {\n    // passed on Search bar as a prop\n    // console.log('Search --> location.target.value --> ', location.target.value) // name of neighbourhood\n    // console.log('Search --> this.state.art_works --> ', this.state.art_works) // name of neighbourhood\n    console.log('Select Neighbourhood - data --> ', data) // name of neighbourhood\n      \n    // if it's not Vancouver then do this: \n\n    if ('Vancouver' === location.target.value) {\n      // this.setState({ art_works: this.state.artWorks }) // do nothing \n      this.setState({ art_works: data })\n      // do nothing\n    } else {\n    // if it's anything else, then filter for that \n    // const data = this.state.art_works  \n    const filteredData = data.filter(area => \n      area.neighbourhood === location.target.value);\n    \n      this.setState({ art_works: filteredData })\n\n      console.log('Select Neighbourhood - filteredData --> ', filteredData)\n    }\n\n    // console.log('Search --> filteredData --> ', filteredData)\n      \n    // const filteredData = this.state.filtered_art_works.filter( (area) => {\n    //   return area.neighbourhood === event.target.value\n    // })\n    // if (filteredData.length > 0) {\n    //   this.setState({filtered_art_works: filteredData})\n    // }\n    // else {\n    //   this.setState({filtered_art_works: publicArtData})\n    // } \n\n  }\n  \n  selectFavourties = (e, faves) => {\n    console.log('Select Favourites - data --> ', data)   // data being filtered \n    console.log('Select Favourites - userFavouritesByRegistryId --> ', this.state.userFavouritesByRegistryId) // by registry_id\n\n    // return from all art_works (data) only those included in the userFavouritesByRegistryId array \n    const selectFavourties = data.filter( i => this.state.userFavouritesByRegistryId.includes( i.registry_id ) );\n\n    console.log('Select Favourites - selectFavourties --> ', selectFavourties)\n\n    this.setState({ art_works: selectFavourties })\n  }\n\n  print = () => {\n    console.log('Hello')\n    console.log('Print', this.state.userFavourites)    \n  }\n  \n  removeFromFavourites = (e, registry_id) => {\n\n    console.log('REMOVE to Favourites --> ', registry_id)\n    console.log('this.state.art_works --> ', this.state.art_works) // displays all, \n    // console.log('this.state.userFavouritesByRegistryId -->', this.state.userFavouritesByRegistryId) // lots of duplicates \n\n    // take all art_works currently in state and remove the registry_id selected, then set the new array in state\n\n    // filter out the selected registry_id from all art_works being displayed \n    const result = this.state.art_works.filter(work => work.registry_id !== registry_id)\n\n    console.log('Filtered --> ', result)\n\n\n    // const afterRemovingArtWork = this.state.art_works.filter( i => this.state.userFavouritesByRegistryId.includes( !i.registry_id ))\n    // this.setState(state => {\n    //   return {display: !state.display}\n    // })\n    \n\n    // this.state.userFavourites.forEach(function (item, index) {\n    //   if (item.art_works.registry_id === data) {\n    //     localStorage.setItem('art_work_id', item.art_work_id)\n    //   }\n    // })\n\n    // const artWorkId = parseInt(localStorage.getItem('art_work_id'))\n  \n    // // Send remove \n    // axios\n    //   .delete(`${API_URL}/favourites/${this.state.user_id}/remove/${artWorkId}`)\n    //   .then((response) => {\n    //     this.setState(state => {\n    //       return {display: !state.display}\n    //     })\n    //   })\n    //   .catch((error) => {\n    //   console.log('error:', error.response.data);\n    //   })\n\n    // this.getUserFavourites()\n\n    // this.forceUpdate()\n  \n    // this.setState(state => {\n    //   return {display: !state.display}\n    // })\n\n    //  window.location.reload() \n    // this.forceUpdate()\n\n    localStorage.removeItem('art_work_id');\n    // this.forceUpdate()\n  }\n\n  addToFavourites = (e, registry_id) => {\n    // console.log('Liked state -->', this.state.liked)\n    console.log('ADD to Favourites -- registry.id --> ', registry_id)\n    //console.log(e)\n    console.log('this.state.art_works --> ', this.state.art_works)\n    console.log('this.state.userFavouritesByRegistryId -->', this.state.userFavouritesByRegistryId)\n    // get art_work_id used in MySQL given given registry_id\n    this.state.art_works.forEach(function (item, index) {\n      if (item.registry_id === registry_id) {\n        const position = index + 1 \n        localStorage.setItem('art_work_id_for_user_post', position)\n      }\n    })\n    const art_work_id_for_user_post = parseInt(localStorage.getItem('art_work_id_for_user_post'))\n    \n    console.log(`${API_URL}/favourites/${this.state.user_id}/${art_work_id_for_user_post}`)\n\n    axios\n      .post(`${API_URL}/favourites/${this.state.user_id}/${art_work_id_for_user_post}`)\n      .then((response) => {\n        // window.location.reload()\n        // console.log('this.state.userFavouritesByRegistryId - After Axios-->', this.state.userFavouritesByRegistryId)\n      })\n      .catch((error) => {\n      console.log('error:', error.response.data);\n      })\n    \n    // localStorage.removeItem('art_work_id_for_user_post') // neede? \n    this.getUserFavourites()  // update userFavourites in state \n\n    // localStorage.removeItem('art_work_id_for_user_post');\n\n    // console.log('this.state.userFavouritesByRegistryId -->', this.state.userFavouritesByRegistryId)\n   //  window.location.reload() \n    // Get Gray heart Click ... \n    // const grayHeart = document.getElementById('grayHeart');\n    //   grayHeart.addEventListener('click', () => { \n    //     document.getElementById(\"pv-contact-info\").innerText; \n    // });\n  }\n\n  visitDetailsPage = (e, registry_id) => {\n    this.props.history.push(`/details/${registry_id}`)\n  }\n\n  // L.CustomHandler = L.Handler.extend({\n  //   addHooks: function() {\n  //       L.DomEvent.on(document, 'eventname', this._doSomething, this);\n  // },\n\n  // <a href=\"https://www.vecteezy.com/free-vector/human\">Human Vectors by Vecteezy</a>\n  // Choose your Avatar Character --> https://www.vecteezy.com/free-vector/8-bit-character?license-free=true\n\n\n  render() {\n\n    console.log('Render -> Art_works --> ', this.state.art_works);\n    // console.log('Render -> User Favourties --> ', this.state.userFavourites);\n    { console.log('Hello')}\n    // console.log(`Hi, I'm the map for user --> `, this.state.user_id)\n    // console.log(`User's current location --> `, this.state.userCurrentLocation);\n    // console.log('userFavourites --> ', this.state.userFavourites);\n    // console.log('userFavouritesByRegistryId --> ', this.state.userFavouritesByRegistryId);\n\n    // console.log('neighbourhood Boundaries: fields.name -->', neighbourhood_boundaries[0].fields.name)\n    // console.log('neighbourhood Boundaries: fields.name.coordinates -->', neighbourhood_boundaries[0].fields.geom.coordinates)\n    // console.log('neighbourhood Boundaries: geom -->', Dunbar)\n    // console.log('neighbourhood Boundaries: inState -->', this.state.neighbourhood_boundaries)\n\n    // const groupedByType = groupBy(restaurants, (restaurant) => restaurant.type);\n    // const userFavouritesObj = this.state.userFavourites\n\n    return (\n      <section>\n        {/* <Search\n          selectNeighbourhood={this.selectNeighbourhood}\n          selectFavourties={this.selectFavourties}\n          faves={this.state.userFavourites}\n        /> */}\n        {/* https://www.w3schools.com/howto/howto_custom_select.asp */}\n        \n        {/* //------------------ Floating Task Bar -----------------//  */}\n\n        \n\n        {/* <section className=\"floating-search\">\n          <section className=\"floating-search__container\">\n            <div>\n              <select name=\"neighbourhood\" id=\"neighbourhood-select\">\n              <option value=\"\">Neighbourhood</option>\n                  <option value=\"Vancouver\">All of Vancouver</option>\n              </select>\n            </div>\n            <div>\n              <img className=\"floating__icon\" src={redHeart}/>\n            </div>\n          </section>\n        </section> */}\n\n      <section className=\"floating\">\n        <section className=\"floating__container\" >\n          <select className=\"floating__select\" onChange={this.selectNeighbourhood} name=\"neighbourhood\" id=\"neighbourhood-select\">\n            <option value=\"\">Neighbourhood</option>\n              <option value=\"Vancouver\">All of Vancouver</option>\n              {neighbourhoods.map((area, i) =>\n              <option value={area} key={i}>{area}</option>\n              )}\n            </select>\n          <div className=\"floating__btn\">\n            <img onClick={ e => console.log('Hello')} className=\"floating__icon\" src={redHeart} />\n          </div>\n        </section>\n      </section>\n      \n\n        \n\n        <MapContainer center={[49.2780, -123.1153]} zoom={12}>\n            {/* <TileLayer\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a>'\n          /> */}\n            <TileLayer\n              // url={`${URL_CUSTOM_OUTDOORS}`}\n              url={`${URL_CUSTOM_OUTDOORS_DARKER}`}\n              attribution=\"© <a href='http://osm.org/copyright'>OpenStreetMap</a> <a href='https://www.mapbox.com/about/maps/'>Mapbox</a>\"\n            />\n          \n          \n          {/* //  -------- GitHub test Markers --------  // */}\n          <Marker position={[49.2780, -123.1153]} icon={blackGithub}></Marker>\n\n          <Marker className=\"current-user-location AVATAR\"\n            position={[\n              this.state.userCurrentLocation[0],\n              this.state.userCurrentLocation[1]\n            ]}\n            icon={redGithub}>\n            <Popup>\n              <h2>Current User Location</h2>\n              <h2>{this.state.userCurrentLocation}</h2>\n              </Popup>\n          </Marker>\n          {/* //  -------- GitHub test Markers --------  // */}\n          \n\n          {/* userCurrentLocation: [parseFloat(localStorage.getItem('userLat')), parseFloat(localStorage.getItem('userLon'))], */}\n          \n            {/* // ------ Display Markers by Neighbourhood ------ //  */}\n              {this.state.art_works.map(artWork => (\n                <Marker\n                  position={[\n                    artWork.lat,\n                    artWork.lon\n                  ]}\n                  id={`marker-${artWork.registry_id}`}\n                  className={`marker-${artWork.registry_id}`}\n                  // icon={`${artWork.type}`}\n                  // icon={artWork.type !== 'Memorial_or_monument' ? DefaultIcon : fountain} // works =) \n\n                  icon={ artWork.type === 'Fountain'             ? fountain    \n                       : artWork.type === 'Gateway'              ? gateway     \n                       : artWork.type === 'Memorial_or_monument' ? memorial     \n                       : artWork.type === 'Totem_pole'           ? totem      \n                       : artWork.type === 'Site_integrated_work' ? siteIntergrated\n                       : artWork.type === 'Mural'                ? mural\n                       : artWork.type === '2D'                   ? mural        \n                       : artWork.type === 'Mosaic'               ? mosaic\n                       : artWork.type === 'Relief'               ? mosaic\n                       : artWork.type === 'Media_work'           ? mosaic\n                       : artWork.type === 'Sculpture'            ? statue\n                       : artWork.type === 'Figurative'           ? statue\n                                                                 : defaultIconSkater}\n                \n\n                  // icon={cool = () => { if (artWork.type !== 'Memorial_or_monument') { DefaultIcon } else { fountain } }}\n                  // icon={fountain} // Memorial_or_monument\n                  // icon={if artWork is fountatin then place fountain if artWork.type === Sculpture then display sculpture.svg}\n                  alt={`marker-${artWork.registry_id}`}\n                >\n                  \n                  <Popup id={`popup-${artWork.registry_id}`}>\n                    <div className=\"popup\">\n                      <img className=\"img\" src={artWork.photo_url_jpg} alt={artWork.title} />\n                      <div className=\"popup-inside\">\n                        <div>\n                          <h1 onClick={(e) => { this.addToFavourites(e, artWork.registry_id) }}>{artWork.title}</h1>\n                          <h2>by {artWork.artists_names}</h2>\n                          <h2>{artWork.type}</h2>\n                        </div>\n                        <div className=\"popup-icons\">\n                          <img className=\"icon-maximize\" src={iconMaximize} alt=\"maximize icon, click to visit details page\"\n                            onClick={(e) => { this.visitDetailsPage(e, artWork.registry_id) }}></img>\n                          \n                          {/* {console.log('FROM THE TURNARY ---> ', this.state.userFavouritesByRegistryId.includes(artWork.registry_id))} */}\n                          \n                          {this.state.userFavouritesByRegistryId.includes(artWork.registry_id) === true ? (\n                            \n                            <img className=\"icon\" src={redHeart} alt=\"red heart icon, click to remove from favourites\"\n                              onClick={(e) => {this.removeFromFavourites(e, artWork.registry_id)}}></img>\n                          ) : (\n                            // <img className=\"icon\" src={lightGray1Heart2} alt=\"white heart icon, click to add to favourites\"\n                            <img className=\"icon\" src={blackHeart} alt=\"white heart icon, click to add to favourites\"\n                              onClick={(e) => { this.addToFavourites(e, artWork.registry_id) }}></img>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </Popup>\n                </Marker>\n              ))}\n\n            {/* // ------ Display userFavourites ------ //  */}\n\n            <Polygon color=\"blue\" positions={this.state.neighbourhood_boundaries[0].fields.geom.coordinates} />\n            <GeoJSON key=\"my-geojson\" data={this.state.neighbourhood_boundaries[0].fields.geom.coordinates} />\n              {/* <LayersControl.Overlay name=\"User Favourites\">\n                <LayerGroup>\n                {this.state.userFavourites.map(artWork => (\n                  <Marker\n                    position={[\n                      artWork.art_works.lat,\n                      artWork.art_works.lon\n                    ]}\n                    eventHandlers={{ click: () => { console.log('marker clicked') },}}>\n                    <Popup>\n                      <div className=\"popup\">\n                        <img className=\"img\" src={artWork.art_works.photo_url_jpg} alt={artWork.art_works.title} />\n                        <div className=\"popup-inside\">\n                          <div>\n                            <h1>{artWork.art_works.title}</h1>\n                            <h2>by {artWork.art_works.artists_names}</h2>\n                          </div>\n                          <div>\n                            {this.state.userFavouritesByRegistryId.includes(artWork.registry_id) === true ? (\n                              <img className=\"icon\" src={redHeart} alt=\"red heart icon, click to remove from favourites\"></img>\n                            ) : (\n                              // <img src={lightGray1Heart2Filled} alt=\"white heart icon, click to add to favourites\"></img>\n                                <img className=\"icon\" id=\"grayHeart\" src={lightGray1Heart2} alt=\"white heart icon, click to add to favourites\"\n                                    onClick={(e) => { this.addToFavourites(e, artWork.registry_id)} }></img>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </Popup>\n                  </Marker>\n                ))}\n                </LayerGroup>\n              </LayersControl.Overlay> */}\n\n              {/* // ------ Neighbourhoods ------ //  */}\n              {/* <LayersControl.Overlay checked name=\"Neighbourhoods\">\n                <LayerGroup> */}\n                  {/* <Polygon pathOptions={{ color: 'green' }} positions={neighbourhood_boundaries[0].fields.geom.coordinates} /> */}\n                  \n                {/* <Polygon color=\"blue\" positions={this.state.neighbourhood_boundaries[0].fields.geom.coordinates[0]} /> */}\n                {/* <GeoJSON key={keyFunction(this.props.map.data.json)} data={this.props.map.data.json} /> */}\n                {/* </LayerGroup>\n              </LayersControl.Overlay> */}\n          {/* </LayersControl>   */}\n          </MapContainer>\n        <BottomNav />\n      </section>\n    );\n  }\n}\n\nexport default MapArt4_skateVideo_classComp;\n\n\n//---------------- PolyLine Experiment -------------//\n// <Polyline pathOptions={limeOptions} positions={multiPolyline} />  // Polyline inside is not colored\n// <Polygon pathOptions={purpleOptions} positions={multiPolygon} />\n\n\n\n"]},"metadata":{},"sourceType":"module"}